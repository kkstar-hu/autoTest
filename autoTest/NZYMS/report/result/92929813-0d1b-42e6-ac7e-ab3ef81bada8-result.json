{"name": "5.散货入库车辆放行", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=108.0.5359.125)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00C3ACD3+2075859]\n\tOrdinal0 [0x00BCEE61+1633889]\n\tOrdinal0 [0x00ACB7BD+571325]\n\tOrdinal0 [0x00AB2E1A+470554]\n\tOrdinal0 [0x00B1AA0B+895499]\n\tOrdinal0 [0x00B2AC96+961686]\n\tOrdinal0 [0x00B17136+880950]\n\tOrdinal0 [0x00AEFEFD+720637]\n\tOrdinal0 [0x00AF0F3F+724799]\n\tGetHandleVerifier [0x00EEEED2+2769538]\n\tGetHandleVerifier [0x00EE0D95+2711877]\n\tGetHandleVerifier [0x00CCA03A+521194]\n\tGetHandleVerifier [0x00CC8DA0+516432]\n\tOrdinal0 [0x00BD682C+1665068]\n\tOrdinal0 [0x00BDB128+1683752]\n\tOrdinal0 [0x00BDB215+1683989]\n\tOrdinal0 [0x00BE6484+1729668]\n\tBaseThreadInitThunk [0x76416BD9+25]\n\tRtlGetFullPathName_UEx [0x779B8FD2+1218]\n\tRtlGetFullPathName_UEx [0x779B8F9D+1165]", "trace": "@pytest.fixture(scope=\"session\")\n    def driver():\n        driver=webdriver.Chrome()\n        login = Login(driver)\n>       login.geturl(config.host)\n\nD:\\test\\autoTest\\NZYMS\\TestCase\\conftest.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\Base\\basepage.py:103: in geturl\n    self.driver.maximize_window()\nC:\\python309\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:607: in maximize_window\n    self.execute(command, None)\nC:\\python309\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021ED44B28B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...unk [0x76416BD9+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x779B8FD2+1218]\\\\n\\\\tRtlGetFullPathName_UEx [0x779B8F9D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=108.0.5359.125)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00C3ACD3+2075859]\nE       \tOrdinal0 [0x00BCEE61+1633889]\nE       \tOrdinal0 [0x00ACB7BD+571325]\nE       \tOrdinal0 [0x00AB2E1A+470554]\nE       \tOrdinal0 [0x00B1AA0B+895499]\nE       \tOrdinal0 [0x00B2AC96+961686]\nE       \tOrdinal0 [0x00B17136+880950]\nE       \tOrdinal0 [0x00AEFEFD+720637]\nE       \tOrdinal0 [0x00AF0F3F+724799]\nE       \tGetHandleVerifier [0x00EEEED2+2769538]\nE       \tGetHandleVerifier [0x00EE0D95+2711877]\nE       \tGetHandleVerifier [0x00CCA03A+521194]\nE       \tGetHandleVerifier [0x00CC8DA0+516432]\nE       \tOrdinal0 [0x00BD682C+1665068]\nE       \tOrdinal0 [0x00BDB128+1683752]\nE       \tOrdinal0 [0x00BDB215+1683989]\nE       \tOrdinal0 [0x00BE6484+1729668]\nE       \tBaseThreadInitThunk [0x76416BD9+25]\nE       \tRtlGetFullPathName_UEx [0x779B8FD2+1218]\nE       \tRtlGetFullPathName_UEx [0x779B8F9D+1165]\n\nC:\\python309\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: NoSuchWindowException"}, "description": "送提货车确认放行", "parameters": [{"name": "input", "value": "{'结算主体': 'FZ/深水港国际物流', '箱号': 'JX_F16CA3', '堆场': 'FZ/辅助区堆场', '道口': '01', '计划类型': 'SH/散货入库', '仓库': 'XL/鞋类', '外部编号': 'Q1234', '航次': 'W3333', '联系人': '测试', '联系电话': '13199992222', '备注': '备注测试', 'addplanalert': '新增成功', '提单号': 'T9', '分提单': 'F3', '货名': '足球鞋', '唛头': 'T190', '包装': '纸箱', '件数': '20', '体积': '60', '重量(kg)': '800', 'addboxalert': '新增成功', '车牌': '沪', '车号': 'Q33221', '手机号': 13122221111, 'addcaralert': '新增成功', '入库位置1': 'A1', '入库位置2': '0101', '入库': '20', '残碎': '0', '入库体积': '60', '入库重量(kg)': '800', 'addboxconfirm': '新增成功'}"}], "start": 1673340002251, "stop": 1673340002251, "uuid": "35d3a273-498d-4f7d-aaf3-4550373f0fb4", "historyId": "342d455219169bad7db5d4ccffa16b97", "testCaseId": "4839d1fde730ff76b2077639b3454acd", "fullName": "TestCase.SmokeTest.06_bulkcargointostorage.test_bulkcargointostorage#testSendMention", "labels": [{"name": "story", "value": "6.散货入库计划流程"}, {"name": "parentSuite", "value": "TestCase.SmokeTest.06_bulkcargointostorage"}, {"name": "suite", "value": "test_bulkcargointostorage"}, {"name": "host", "value": "LAPTOP-JVNK63L5"}, {"name": "thread", "value": "16644-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.SmokeTest.06_bulkcargointostorage.test_bulkcargointostorage"}]}